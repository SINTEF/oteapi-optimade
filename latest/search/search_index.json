{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OTE-API OPTIMADE \u00b6 An OTE-API Plugin with OTE strategies. Further reading: OTE-API Core Documentation OTE-API Services Documentation License and copyright \u00b6 OTE-API OPTIMADE is released under the MIT license with copyright \u00a9 SINTEF. Acknowledgment \u00b6 OTE-API OPTIMADE has been created via the cookiecutter template for OTE-API plugins . OTE-API OPTIMADE has been supported by the following projects: OntoTrans (2020-2024) that receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme, under Grant Agreement n. 862136.","title":"Home"},{"location":"#ote-api-optimade","text":"An OTE-API Plugin with OTE strategies. Further reading: OTE-API Core Documentation OTE-API Services Documentation","title":"OTE-API OPTIMADE"},{"location":"#license-and-copyright","text":"OTE-API OPTIMADE is released under the MIT license with copyright \u00a9 SINTEF.","title":"License and copyright"},{"location":"#acknowledgment","text":"OTE-API OPTIMADE has been created via the cookiecutter template for OTE-API plugins . OTE-API OPTIMADE has been supported by the following projects: OntoTrans (2020-2024) that receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme, under Grant Agreement n. 862136.","title":"Acknowledgment"},{"location":"CHANGELOG/","text":"Changelog \u00b6 This file will hold an auto-generated changelog for you project.","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"This file will hold an auto-generated changelog for you project.","title":"Changelog"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2022 SINTEF Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"all_strategies/","text":"OTE-API OPTIMADE Strategies \u00b6 This page provides documentation for the oteapi_optimade.strategies submodule, where all the OTE-API OPTIMADE strategies are located. These strategies will be available when setting up a server in an environment with oteapi-optimade installed. download \u00b6 Demo download strategy class for file. FileConfig \u00b6 Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_optimade/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) FileResourceConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value ensure_path_exists ( value ) \u00b6 Ensure path is defined in downloadUrl . Source code in oteapi_optimade/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value FileStrategy \u00b6 Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_optimade/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) get ( session = None ) \u00b6 Read local file. Source code in oteapi_optimade/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_optimade/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () SessionUpdateFile \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" ) filter \u00b6 Demo filter strategy. DemoDataModel \u00b6 Bases: AttrDict Demo filter data model. Source code in oteapi_optimade/strategies/filter.py 13 14 15 16 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ([], description = \"List of demo data.\" ) DemoFilter \u00b6 Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_optimade/strategies/filter.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data ) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data ) initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () DemoFilterConfig \u00b6 Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_optimade/strategies/filter.py 19 20 21 22 23 24 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" configuration : DemoDataModel = Field ( DemoDataModel (), description = \"Demo filter data model.\" ) SessionUpdateDemoFilter \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/filter.py 27 28 29 30 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" ) function \u00b6 Demo function strategy class. DemoFunctionStrategy \u00b6 Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_optimade/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () mapping \u00b6 Demo mapping strategy class. DemoMappingStrategy \u00b6 Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_optimade/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () parse \u00b6 Demo strategy class for text/json. DemoJSONDataParseStrategy \u00b6 Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_optimade/strategies/parse.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) get ( session = None ) \u00b6 Parse json. Source code in oteapi_optimade/strategies/parse.py 58 59 60 61 62 63 64 65 66 67 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_optimade/strategies/parse.py 54 55 56 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () JSONConfig \u00b6 Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_optimade/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) JSONParseConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/parse.py 28 29 30 31 32 33 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" ) SessionUpdateJSONParse \u00b6 Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_optimade/strategies/parse.py 36 37 38 39 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" ) resource \u00b6 Demo resource strategy class. DemoResourceStrategy \u00b6 Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_optimade/strategies/resource.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : ResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ()) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ()) initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () SessionUpdateDemoResource \u00b6 Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_optimade/strategies/resource.py 14 15 16 17 18 19 20 21 22 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), ) transformation \u00b6 Demo transformation strategy class. DummyTransformationStrategy \u00b6 Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_optimade/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, ) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () run ( session = None ) \u00b6 Run a transformation job. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_optimade/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) status ( task_id ) \u00b6 Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_optimade/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, ) SessionUpdateDummyTransformation \u00b6 Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_optimade/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"OTE-API OPTIMADE Strategies"},{"location":"all_strategies/#ote-api-optimade-strategies","text":"This page provides documentation for the oteapi_optimade.strategies submodule, where all the OTE-API OPTIMADE strategies are located. These strategies will be available when setting up a server in an environment with oteapi-optimade installed.","title":"OTE-API OPTIMADE Strategies"},{"location":"all_strategies/#oteapi_optimade.strategies.download","text":"Demo download strategy class for file.","title":"download"},{"location":"all_strategies/#oteapi_optimade.strategies.download.FileConfig","text":"Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_optimade/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"FileConfig"},{"location":"all_strategies/#oteapi_optimade.strategies.download.FileResourceConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"FileResourceConfig"},{"location":"all_strategies/#oteapi_optimade.strategies.download.FileResourceConfig.ensure_path_exists","text":"Ensure path is defined in downloadUrl . Source code in oteapi_optimade/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"ensure_path_exists()"},{"location":"all_strategies/#oteapi_optimade.strategies.download.FileStrategy","text":"Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_optimade/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"FileStrategy"},{"location":"all_strategies/#oteapi_optimade.strategies.download.FileStrategy.get","text":"Read local file. Source code in oteapi_optimade/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"get()"},{"location":"all_strategies/#oteapi_optimade.strategies.download.FileStrategy.initialize","text":"Initialize. Source code in oteapi_optimade/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_optimade.strategies.download.SessionUpdateFile","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateFile"},{"location":"all_strategies/#oteapi_optimade.strategies.filter","text":"Demo filter strategy.","title":"filter"},{"location":"all_strategies/#oteapi_optimade.strategies.filter.DemoDataModel","text":"Bases: AttrDict Demo filter data model. Source code in oteapi_optimade/strategies/filter.py 13 14 15 16 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ([], description = \"List of demo data.\" )","title":"DemoDataModel"},{"location":"all_strategies/#oteapi_optimade.strategies.filter.DemoFilter","text":"Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_optimade/strategies/filter.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data )","title":"DemoFilter"},{"location":"all_strategies/#oteapi_optimade.strategies.filter.DemoFilter.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data )","title":"get()"},{"location":"all_strategies/#oteapi_optimade.strategies.filter.DemoFilter.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_optimade.strategies.filter.DemoFilterConfig","text":"Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_optimade/strategies/filter.py 19 20 21 22 23 24 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" configuration : DemoDataModel = Field ( DemoDataModel (), description = \"Demo filter data model.\" )","title":"DemoFilterConfig"},{"location":"all_strategies/#oteapi_optimade.strategies.filter.SessionUpdateDemoFilter","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/filter.py 27 28 29 30 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateDemoFilter"},{"location":"all_strategies/#oteapi_optimade.strategies.function","text":"Demo function strategy class.","title":"function"},{"location":"all_strategies/#oteapi_optimade.strategies.function.DemoFunctionStrategy","text":"Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_optimade/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoFunctionStrategy"},{"location":"all_strategies/#oteapi_optimade.strategies.function.DemoFunctionStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"all_strategies/#oteapi_optimade.strategies.function.DemoFunctionStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_optimade.strategies.mapping","text":"Demo mapping strategy class.","title":"mapping"},{"location":"all_strategies/#oteapi_optimade.strategies.mapping.DemoMappingStrategy","text":"Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_optimade/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoMappingStrategy"},{"location":"all_strategies/#oteapi_optimade.strategies.mapping.DemoMappingStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"all_strategies/#oteapi_optimade.strategies.mapping.DemoMappingStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_optimade.strategies.parse","text":"Demo strategy class for text/json.","title":"parse"},{"location":"all_strategies/#oteapi_optimade.strategies.parse.DemoJSONDataParseStrategy","text":"Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_optimade/strategies/parse.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"DemoJSONDataParseStrategy"},{"location":"all_strategies/#oteapi_optimade.strategies.parse.DemoJSONDataParseStrategy.get","text":"Parse json. Source code in oteapi_optimade/strategies/parse.py 58 59 60 61 62 63 64 65 66 67 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"get()"},{"location":"all_strategies/#oteapi_optimade.strategies.parse.DemoJSONDataParseStrategy.initialize","text":"Initialize. Source code in oteapi_optimade/strategies/parse.py 54 55 56 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_optimade.strategies.parse.JSONConfig","text":"Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_optimade/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"JSONConfig"},{"location":"all_strategies/#oteapi_optimade.strategies.parse.JSONParseConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/parse.py 28 29 30 31 32 33 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" )","title":"JSONParseConfig"},{"location":"all_strategies/#oteapi_optimade.strategies.parse.SessionUpdateJSONParse","text":"Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_optimade/strategies/parse.py 36 37 38 39 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" )","title":"SessionUpdateJSONParse"},{"location":"all_strategies/#oteapi_optimade.strategies.resource","text":"Demo resource strategy class.","title":"resource"},{"location":"all_strategies/#oteapi_optimade.strategies.resource.DemoResourceStrategy","text":"Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_optimade/strategies/resource.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : ResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ())","title":"DemoResourceStrategy"},{"location":"all_strategies/#oteapi_optimade.strategies.resource.DemoResourceStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ())","title":"get()"},{"location":"all_strategies/#oteapi_optimade.strategies.resource.DemoResourceStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_optimade.strategies.resource.SessionUpdateDemoResource","text":"Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_optimade/strategies/resource.py 14 15 16 17 18 19 20 21 22 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), )","title":"SessionUpdateDemoResource"},{"location":"all_strategies/#oteapi_optimade.strategies.transformation","text":"Demo transformation strategy class.","title":"transformation"},{"location":"all_strategies/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy","text":"Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_optimade/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, )","title":"DummyTransformationStrategy"},{"location":"all_strategies/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"all_strategies/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"all_strategies/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.run","text":"Run a transformation job. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_optimade/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" )","title":"run()"},{"location":"all_strategies/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.status","text":"Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_optimade/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, )","title":"status()"},{"location":"all_strategies/#oteapi_optimade.strategies.transformation.SessionUpdateDummyTransformation","text":"Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_optimade/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"SessionUpdateDummyTransformation"},{"location":"api_reference/strategies/download/","text":"download \u00b6 Demo download strategy class for file. FileConfig \u00b6 Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_optimade/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) FileResourceConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value ensure_path_exists ( value ) \u00b6 Ensure path is defined in downloadUrl . Source code in oteapi_optimade/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value FileStrategy \u00b6 Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_optimade/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) get ( session = None ) \u00b6 Read local file. Source code in oteapi_optimade/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key ) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_optimade/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () SessionUpdateFile \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"download"},{"location":"api_reference/strategies/download/#download","text":"Demo download strategy class for file.","title":"download"},{"location":"api_reference/strategies/download/#oteapi_optimade.strategies.download.FileConfig","text":"Bases: AttrDict File-specific Configuration Data Model. Source code in oteapi_optimade/strategies/download.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class FileConfig ( AttrDict ): \"\"\"File-specific Configuration Data Model.\"\"\" text : bool = Field ( False , description = ( \"Whether the file should be opened in text mode. If `False`, the file will\" \" be opened in bytes mode.\" ), ) encoding : Optional [ str ] = Field ( None , description = ( \"Encoding used when opening the file. The default is platform dependent.\" ), ) datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"FileConfig"},{"location":"api_reference/strategies/download/#oteapi_optimade.strategies.download.FileResourceConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/download.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class FileResourceConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" downloadUrl : FileUrl = Field ( # type: ignore[assignment] ... , description = \"The file URL, which will be downloaded.\" ) configuration : FileConfig = Field ( FileConfig (), description = \"File download strategy-specific configuration.\" ) @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"FileResourceConfig"},{"location":"api_reference/strategies/download/#oteapi_optimade.strategies.download.FileResourceConfig.ensure_path_exists","text":"Ensure path is defined in downloadUrl . Source code in oteapi_optimade/strategies/download.py 50 51 52 53 54 55 @validator ( \"downloadUrl\" ) def ensure_path_exists ( cls , value : FileUrl ) -> FileUrl : \"\"\"Ensure `path` is defined in `downloadUrl`.\"\"\" if not value . path : raise ValueError ( \"downloadUrl must contain a `path` part.\" ) return value","title":"ensure_path_exists()"},{"location":"api_reference/strategies/download/#oteapi_optimade.strategies.download.FileStrategy","text":"Strategy for retrieving data from a local file. Registers strategies : (\"scheme\", \"fileDEMO\") Source code in oteapi_optimade/strategies/download.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 @dataclass class FileStrategy : \"\"\"Strategy for retrieving data from a local file. **Registers strategies**: - `(\"scheme\", \"fileDEMO\")` \"\"\" download_config : FileResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"FileStrategy"},{"location":"api_reference/strategies/download/#oteapi_optimade.strategies.download.FileStrategy.get","text":"Read local file. Source code in oteapi_optimade/strategies/download.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateFile : \"\"\"Read local file.\"\"\" filename = uri_to_path ( self . download_config . downloadUrl ) . resolve () if not filename . exists (): raise FileNotFoundError ( f \"File not found at { filename } \" ) cache = DataCache ( self . download_config . configuration . datacache_config ) if cache . config . accessKey and cache . config . accessKey in cache : key = cache . config . accessKey else : key = cache . add ( filename . read_text ( encoding = self . download_config . configuration . encoding ) if self . download_config . configuration . text else filename . read_bytes () ) return SessionUpdateFile ( key = key )","title":"get()"},{"location":"api_reference/strategies/download/#oteapi_optimade.strategies.download.FileStrategy.initialize","text":"Initialize. Source code in oteapi_optimade/strategies/download.py 76 77 78 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/download/#oteapi_optimade.strategies.download.SessionUpdateFile","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/download.py 58 59 60 61 class SessionUpdateFile ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateFile"},{"location":"api_reference/strategies/filter/","text":"filter \u00b6 Demo filter strategy. DemoDataModel \u00b6 Bases: AttrDict Demo filter data model. Source code in oteapi_optimade/strategies/filter.py 13 14 15 16 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ([], description = \"List of demo data.\" ) DemoFilter \u00b6 Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_optimade/strategies/filter.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data ) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data ) initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () DemoFilterConfig \u00b6 Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_optimade/strategies/filter.py 19 20 21 22 23 24 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" configuration : DemoDataModel = Field ( DemoDataModel (), description = \"Demo filter data model.\" ) SessionUpdateDemoFilter \u00b6 Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/filter.py 27 28 29 30 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"filter"},{"location":"api_reference/strategies/filter/#filter","text":"Demo filter strategy.","title":"filter"},{"location":"api_reference/strategies/filter/#oteapi_optimade.strategies.filter.DemoDataModel","text":"Bases: AttrDict Demo filter data model. Source code in oteapi_optimade/strategies/filter.py 13 14 15 16 class DemoDataModel ( AttrDict ): \"\"\"Demo filter data model.\"\"\" demo_data : List [ int ] = Field ([], description = \"List of demo data.\" )","title":"DemoDataModel"},{"location":"api_reference/strategies/filter/#oteapi_optimade.strategies.filter.DemoFilter","text":"Filter Strategy. Registers strategies : (\"filterType\", \"filter/DEMO\") Source code in oteapi_optimade/strategies/filter.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 @dataclass class DemoFilter : \"\"\"Filter Strategy. **Registers strategies**: - `(\"filterType\", \"filter/DEMO\")` \"\"\" filter_config : DemoFilterConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data )","title":"DemoFilter"},{"location":"api_reference/strategies/filter/#oteapi_optimade.strategies.filter.DemoFilter.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoFilter An update model of key/value-pairs to be stored in the SessionUpdateDemoFilter session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoFilter : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdateDemoFilter ( key = self . filter_config . configuration . demo_data )","title":"get()"},{"location":"api_reference/strategies/filter/#oteapi_optimade.strategies.filter.DemoFilter.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/filter.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/filter/#oteapi_optimade.strategies.filter.DemoFilterConfig","text":"Bases: FilterConfig Demo filter strategy filter config. Source code in oteapi_optimade/strategies/filter.py 19 20 21 22 23 24 class DemoFilterConfig ( FilterConfig ): \"\"\"Demo filter strategy filter config.\"\"\" configuration : DemoDataModel = Field ( DemoDataModel (), description = \"Demo filter data model.\" )","title":"DemoFilterConfig"},{"location":"api_reference/strategies/filter/#oteapi_optimade.strategies.filter.SessionUpdateDemoFilter","text":"Bases: SessionUpdate Class for returning values from Download File strategy. Source code in oteapi_optimade/strategies/filter.py 27 28 29 30 class SessionUpdateDemoFilter ( SessionUpdate ): \"\"\"Class for returning values from Download File strategy.\"\"\" key : str = Field ( ... , description = \"Key to access the data in the cache.\" )","title":"SessionUpdateDemoFilter"},{"location":"api_reference/strategies/function/","text":"function \u00b6 Demo function strategy class. DemoFunctionStrategy \u00b6 Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_optimade/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"function"},{"location":"api_reference/strategies/function/#function","text":"Demo function strategy class.","title":"function"},{"location":"api_reference/strategies/function/#oteapi_optimade.strategies.function.DemoFunctionStrategy","text":"Function Strategy. Registers strategies : (\"functionType\", \"function/DEMO\") Source code in oteapi_optimade/strategies/function.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoFunctionStrategy : \"\"\"Function Strategy. **Registers strategies**: - `(\"functionType\", \"function/DEMO\")` \"\"\" function_config : FunctionConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoFunctionStrategy"},{"location":"api_reference/strategies/function/#oteapi_optimade.strategies.function.DemoFunctionStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"api_reference/strategies/function/#oteapi_optimade.strategies.function.DemoFunctionStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/function.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/mapping/","text":"mapping \u00b6 Demo mapping strategy class. DemoMappingStrategy \u00b6 Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_optimade/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"mapping"},{"location":"api_reference/strategies/mapping/#mapping","text":"Demo mapping strategy class.","title":"mapping"},{"location":"api_reference/strategies/mapping/#oteapi_optimade.strategies.mapping.DemoMappingStrategy","text":"Mapping Strategy. Registers strategies : (\"mappingType\", \"mapping/DEMO\") Source code in oteapi_optimade/strategies/mapping.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dataclass class DemoMappingStrategy : \"\"\"Mapping Strategy. **Registers strategies**: - `(\"mappingType\", \"mapping/DEMO\")` \"\"\" mapping_config : MappingConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"DemoMappingStrategy"},{"location":"api_reference/strategies/mapping/#oteapi_optimade.strategies.mapping.DemoMappingStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"api_reference/strategies/mapping/#oteapi_optimade.strategies.mapping.DemoMappingStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/mapping.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/parse/","text":"parse \u00b6 Demo strategy class for text/json. DemoJSONDataParseStrategy \u00b6 Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_optimade/strategies/parse.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) get ( session = None ) \u00b6 Parse json. Source code in oteapi_optimade/strategies/parse.py 58 59 60 61 62 63 64 65 66 67 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content )) initialize ( session = None ) \u00b6 Initialize. Source code in oteapi_optimade/strategies/parse.py 54 55 56 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () JSONConfig \u00b6 Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_optimade/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), ) JSONParseConfig \u00b6 Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/parse.py 28 29 30 31 32 33 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" ) SessionUpdateJSONParse \u00b6 Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_optimade/strategies/parse.py 36 37 38 39 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" )","title":"parse"},{"location":"api_reference/strategies/parse/#parse","text":"Demo strategy class for text/json.","title":"parse"},{"location":"api_reference/strategies/parse/#oteapi_optimade.strategies.parse.DemoJSONDataParseStrategy","text":"Parse strategy for JSON. Registers strategies : (\"mediaType\", \"application/jsonDEMO\") Source code in oteapi_optimade/strategies/parse.py 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 @dataclass class DemoJSONDataParseStrategy : \"\"\"Parse strategy for JSON. **Registers strategies**: - `(\"mediaType\", \"application/jsonDEMO\")` \"\"\" parse_config : JSONParseConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"DemoJSONDataParseStrategy"},{"location":"api_reference/strategies/parse/#oteapi_optimade.strategies.parse.DemoJSONDataParseStrategy.get","text":"Parse json. Source code in oteapi_optimade/strategies/parse.py 58 59 60 61 62 63 64 65 66 67 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateJSONParse : \"\"\"Parse json.\"\"\" downloader = create_strategy ( \"download\" , self . parse_config ) output = downloader . get () cache = DataCache ( self . parse_config . configuration . datacache_config ) content = cache . get ( output [ \"key\" ]) if isinstance ( content , dict ): return SessionUpdateJSONParse ( content = content ) return SessionUpdateJSONParse ( content = json . loads ( content ))","title":"get()"},{"location":"api_reference/strategies/parse/#oteapi_optimade.strategies.parse.DemoJSONDataParseStrategy.initialize","text":"Initialize. Source code in oteapi_optimade/strategies/parse.py 54 55 56 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize.\"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/parse/#oteapi_optimade.strategies.parse.JSONConfig","text":"Bases: AttrDict JSON parse-specific Configuration Data Model. Source code in oteapi_optimade/strategies/parse.py 16 17 18 19 20 21 22 23 24 25 class JSONConfig ( AttrDict ): \"\"\"JSON parse-specific Configuration Data Model.\"\"\" datacache_config : Optional [ DataCacheConfig ] = Field ( None , description = ( \"Configurations for the data cache for storing the downloaded file \" \"content.\" ), )","title":"JSONConfig"},{"location":"api_reference/strategies/parse/#oteapi_optimade.strategies.parse.JSONParseConfig","text":"Bases: ResourceConfig File download strategy filter config. Source code in oteapi_optimade/strategies/parse.py 28 29 30 31 32 33 class JSONParseConfig ( ResourceConfig ): \"\"\"File download strategy filter config.\"\"\" configuration : JSONConfig = Field ( JSONConfig (), description = \"JSON parse strategy-specific configuration.\" )","title":"JSONParseConfig"},{"location":"api_reference/strategies/parse/#oteapi_optimade.strategies.parse.SessionUpdateJSONParse","text":"Bases: SessionUpdate Class for returning values from JSON Parse. Source code in oteapi_optimade/strategies/parse.py 36 37 38 39 class SessionUpdateJSONParse ( SessionUpdate ): \"\"\"Class for returning values from JSON Parse.\"\"\" content : dict = Field ( ... , description = \"Content of the JSON document.\" )","title":"SessionUpdateJSONParse"},{"location":"api_reference/strategies/resource/","text":"resource \u00b6 Demo resource strategy class. DemoResourceStrategy \u00b6 Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_optimade/strategies/resource.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : ResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ()) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ()) initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () SessionUpdateDemoResource \u00b6 Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_optimade/strategies/resource.py 14 15 16 17 18 19 20 21 22 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), )","title":"resource"},{"location":"api_reference/strategies/resource/#resource","text":"Demo resource strategy class.","title":"resource"},{"location":"api_reference/strategies/resource/#oteapi_optimade.strategies.resource.DemoResourceStrategy","text":"Resource Strategy. Registers strategies : (\"accessService\", \"DEMO-access-service\") Source code in oteapi_optimade/strategies/resource.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @dataclass class DemoResourceStrategy : \"\"\"Resource Strategy. **Registers strategies**: - `(\"accessService\", \"DEMO-access-service\")` \"\"\" resource_config : ResourceConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ())","title":"DemoResourceStrategy"},{"location":"api_reference/strategies/resource/#oteapi_optimade.strategies.resource.DemoResourceStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDemoResource An update model of key/value-pairs to be stored in the SessionUpdateDemoResource session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDemoResource : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" # Example of the plugin using the download strategy to fetch the data download_strategy = create_strategy ( \"download\" , self . resource_config ) read_output = download_strategy . get ( session ) return SessionUpdateDemoResource ( output = read_output . dict ())","title":"get()"},{"location":"api_reference/strategies/resource/#oteapi_optimade.strategies.resource.DemoResourceStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/resource.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/resource/#oteapi_optimade.strategies.resource.SessionUpdateDemoResource","text":"Bases: SessionUpdate Class for returning values from Demo Resource strategy. Source code in oteapi_optimade/strategies/resource.py 14 15 16 17 18 19 20 21 22 class SessionUpdateDemoResource ( SessionUpdate ): \"\"\"Class for returning values from Demo Resource strategy.\"\"\" output : dict = Field ( ... , description = ( \"The output from downloading the response from the given `accessUrl`.\" ), )","title":"SessionUpdateDemoResource"},{"location":"api_reference/strategies/transformation/","text":"transformation \u00b6 Demo transformation strategy class. DummyTransformationStrategy \u00b6 Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_optimade/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, ) get ( session = None ) \u00b6 Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () initialize ( session = None ) \u00b6 Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () run ( session = None ) \u00b6 Run a transformation job. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_optimade/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) status ( task_id ) \u00b6 Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_optimade/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, ) SessionUpdateDummyTransformation \u00b6 Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_optimade/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"transformation"},{"location":"api_reference/strategies/transformation/#transformation","text":"Demo transformation strategy class.","title":"transformation"},{"location":"api_reference/strategies/transformation/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy","text":"Transformation Strategy. Registers strategies : (\"transformationType\", \"script/DEMO\") Source code in oteapi_optimade/strategies/transformation.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 @dataclass class DummyTransformationStrategy : \"\"\"Transformation Strategy. **Registers strategies**: - `(\"transformationType\", \"script/DEMO\")` \"\"\" transformation_config : TransformationConfig def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate () def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" ) def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, )","title":"DummyTransformationStrategy"},{"location":"api_reference/strategies/transformation/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.get","text":"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Execute the strategy. This method will be called through the strategy-specific endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"get()"},{"location":"api_reference/strategies/transformation/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.initialize","text":"Initialize strategy. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdate An update model of key/value-pairs to be stored in the SessionUpdate session-specific context from services. Source code in oteapi_optimade/strategies/transformation.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def initialize ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdate : \"\"\"Initialize strategy. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. \"\"\" return SessionUpdate ()","title":"initialize()"},{"location":"api_reference/strategies/transformation/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.run","text":"Run a transformation job. This method will be called through the /initialize endpoint of the OTE-API Services. Parameters: Name Type Description Default session 'Optional[Dict[str, Any]]' A session-specific dictionary context. None Returns: Type Description SessionUpdateDummyTransformation An update model of key/value-pairs to be stored in the SessionUpdateDummyTransformation session-specific context from services. SessionUpdateDummyTransformation As a minimum, the dictionary will contain the job ID. Source code in oteapi_optimade/strategies/transformation.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def run ( self , session : \"Optional[Dict[str, Any]]\" = None ) -> SessionUpdateDummyTransformation : \"\"\"Run a transformation job. This method will be called through the `/initialize` endpoint of the OTE-API Services. Parameters: session: A session-specific dictionary context. Returns: An update model of key/value-pairs to be stored in the session-specific context from services. As a minimum, the dictionary will contain the job ID. \"\"\" return SessionUpdateDummyTransformation ( result = \"a01d\" )","title":"run()"},{"location":"api_reference/strategies/transformation/#oteapi_optimade.strategies.transformation.DummyTransformationStrategy.status","text":"Get job status. Parameters: Name Type Description Default task_id str The transformation job ID. required Returns: Type Description TransformationStatus An overview of the transformation job's status, including relevant TransformationStatus metadata. Source code in oteapi_optimade/strategies/transformation.py 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 def status ( self , task_id : str ) -> TransformationStatus : \"\"\"Get job status. Parameters: task_id: The transformation job ID. Returns: An overview of the transformation job's status, including relevant metadata. \"\"\" return TransformationStatus ( id = task_id , status = \"wip\" , messages = [], created = datetime . utcnow (), startTime = datetime . utcnow (), finishTime = datetime . utcnow (), priority = 0 , secret = None , configuration = {}, )","title":"status()"},{"location":"api_reference/strategies/transformation/#oteapi_optimade.strategies.transformation.SessionUpdateDummyTransformation","text":"Bases: SessionUpdate Class for returning values from Dummy Transformation strategy. Source code in oteapi_optimade/strategies/transformation.py 14 15 16 17 class SessionUpdateDummyTransformation ( SessionUpdate ): \"\"\"Class for returning values from Dummy Transformation strategy.\"\"\" result : str = Field ( ... , description = \"The job ID.\" )","title":"SessionUpdateDummyTransformation"}]}