[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "oteapi-optimade"
authors = [
    {name = "Casper Welzel Andersen", email = "casper.w.andersen@sintef.no"},
]
description = "OTE-API Plugin for OPTIMADE."
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    # "Framework :: OTEAPI",
    "Environment :: Plugins",
    "Natural Language :: English",
    "Operating System :: OS Independent",
]
keywords = ["OTE", "OPTIMADE", "OTE-API"]
requires-python = ">=3.9,<3.12"  # DLite does not support Python 3.12 and above
dynamic = ["version"]

dependencies = [
    "DLite-Python >=0.4.5,<1",
    "optimade[server] ~=1.1",
    "oteapi-core ~=0.6.1",
    "oteapi-dlite >=0.2.0,<1",
    "requests ~=2.32",
]

[project.optional-dependencies]
examples = [
    "jupyter ~=1.1",
    "otelib ~=0.4.1",
]
doc = [
    "mike ~=2.1",
    "mkdocs >=1.5.3,<1.7",
    "mkdocs-awesome-pages-plugin ~=2.9",
    "mkdocs-jupyter ~=0.24.8",
    "mkdocs-material >=9.5.5,<10",
    "mkdocstrings[python-legacy] ~=0.26.0",
    "oteapi-optimade[examples]",
]
test = [
    "pytest ~=8.3",
    "pytest-cov ~=5.0",
    "pyyaml ~=6.0",
    "requests-mock ~=1.12",
]
pre-commit = ["pre-commit ~=3.8"]
dev = ["oteapi-optimade[doc,examples,pre-commit,test]"]

[project.urls]
Home = "https://github.com/SINTEF/oteapi-optimade"
Documentation = "https://SINTEF.github.io/oteapi-optimade"
Source = "https://github.com/SINTEF/oteapi-optimade"
"Issue Tracker" = "https://github.com/SINTEF/oteapi-optimade/issues"
Changelog = "https://github.com/SINTEF/oteapi-optimade/blob/main/CHANGELOG.md"
Package = "https://pypi.org/project/oteapi-optimade"

[project.entry-points."oteapi.filter"]
"oteapi_optimade.optimade" = "oteapi_optimade.strategies.filter:OPTIMADEFilterStrategy"
"oteapi_optimade.OPTIMADE" = "oteapi_optimade.strategies.filter:OPTIMADEFilterStrategy"
"oteapi_optimade.OPTiMaDe" = "oteapi_optimade.strategies.filter:OPTIMADEFilterStrategy"

[project.entry-points."oteapi.parse"]
"oteapi_optimade.application/vnd.optimade+json" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.OPTIMADE+json" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.OPTiMaDe+json" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.optimade+JSON" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.OPTIMADE+JSON" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.OPTiMaDe+JSON" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.optimade" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.OPTIMADE" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.OPTiMaDe" = "oteapi_optimade.strategies.parse:OPTIMADEParseStrategy"
"oteapi_optimade.application/vnd.optimade+dlite" = "oteapi_optimade.dlite.parse:OPTIMADEDLiteParseStrategy"
"oteapi_optimade.application/vnd.OPTIMADE+dlite" = "oteapi_optimade.dlite.parse:OPTIMADEDLiteParseStrategy"
"oteapi_optimade.application/vnd.OPTiMaDe+dlite" = "oteapi_optimade.dlite.parse:OPTIMADEDLiteParseStrategy"
"oteapi_optimade.application/vnd.optimade+DLite" = "oteapi_optimade.dlite.parse:OPTIMADEDLiteParseStrategy"
"oteapi_optimade.application/vnd.OPTIMADE+DLite" = "oteapi_optimade.dlite.parse:OPTIMADEDLiteParseStrategy"
"oteapi_optimade.application/vnd.OPTiMaDe+DLite" = "oteapi_optimade.dlite.parse:OPTIMADEDLiteParseStrategy"

[project.entry-points."oteapi.resource"]
"oteapi_optimade.optimade" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.OPTIMADE" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.OPTiMaDe" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.optimade+dlite" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.OPTIMADE+dlite" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.OPTiMaDe+dlite" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.optimade+DLite" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.OPTIMADE+DLite" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"
"oteapi_optimade.OPTiMaDe+DLite" = "oteapi_optimade.strategies.resource:OPTIMADEResourceStrategy"

[tool.flit.module]
name = "oteapi_optimade"

[tool.flit.sdist]
exclude = [
    ".github/",
    "tests/",
    ".gitignore",
    ".pre-commit-config.yaml",
]

[tool.mypy]
python_version = "3.9"
ignore_missing_imports = true
scripts_are_modules = true
warn_unused_configs = true
show_error_codes = true
allow_redefinition = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
warn_unreachable = true
plugins = ["pydantic.mypy"]

[tool.ruff.lint]
extend-select = [
  "B",  # flake8-bugbear
  "I",  # isort
  "ARG",  # flake8-unused-arguments
  "C4",  # flake8-comprehensions
  "EM",  # flake8-errmsg
  "ICN",  # flake8-import-conventions
  "G",  # flake8-logging-format
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PT",  # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "T20",  # flake8-print
  "YTT",  # flake8-2020
  "EXE",  # flake8-executable
  "PYI",  # flake8-pyi
]
ignore = [
  "PLR",  # Design related pylint codes
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"docs/examples/**" = [
    "I002",  # required imports
    "T20",  # print statements
]
"tests/**" = [
    "T20",  # print statements
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-rs --cov=oteapi_optimade --cov-report=term-missing:skip-covered --no-cov-on-fail"
filterwarnings = [
    # Fail on any warning
    "error",

    # Except the following:

    # reset_field() from oteapi.models.AttrDict implements the previous behaviour of
    # __delattr__().
    "ignore:.*reset_field().*:DeprecationWarning",

    # Python 3.10 deprecation warning coming from oteapi-core
    # To follow the solution, see this issue: https://github.com/EMMC-ASBL/oteapi-core/issues/395
    "ignore:.*SelectableGroups dict interface is deprecated.*:DeprecationWarning",
]
